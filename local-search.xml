<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C#梦游计划</title>
    <link href="/2020/11/29/C-%E6%A2%A6%E6%B8%B8%E8%AE%A1%E5%88%92/"/>
    <url>/2020/11/29/C-%E6%A2%A6%E6%B8%B8%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h3 id="生成随机数"><a class="markdownIt-Anchor" href="#生成随机数"></a> 生成随机数</h3><p><code>Random rand = new Random();</code></p><p><code>Random.Next()</code>返回非负随机数；</p><p><code>Random.Next(Int)</code>返回一个小于所指定最大值的非负随机数</p><p><code>Random.Next(Int,Int)</code> 返回一个指定范围内的随机数，例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>100</mn><mi mathvariant="normal">，</mi><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-100，0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>返回负数</p><h4 id="返回一个共有n位数其中m位是小数的随机数"><a class="markdownIt-Anchor" href="#返回一个共有n位数其中m位是小数的随机数"></a> 返回一个共有n位数，其中m位是小数的随机数</h4><pre><code class="hljs c#"><span class="hljs-function">function <span class="hljs-title">randomXiao</span>(<span class="hljs-params">n, m</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">var</span> a = Math.pow(<span class="hljs-number">10</span>, n + m); <span class="hljs-comment">//10的n+m次方</span>    <span class="hljs-keyword">var</span> b = random(a);    <span class="hljs-keyword">return</span> b = b / Math.pow(<span class="hljs-number">10</span>, m);&#125;</code></pre><p>用<code>var</code>类型预先不用知道变量的类型；根据给变量赋值来判定变量属于什么类型；如</p><pre><figcaption><span>a </span></figcaption><code class="hljs var">&#96;&#96;&#96;var a &#x3D; “qwer”;&#96;&#96;&#96; 则$a$是字符型使用Var类型要注意：1. 必须在定义时初始化，即不能先定义后初始化，如：&#96;&#96;&#96;var a；a &#x3D; 1；&#96;&#96;&#96; 这样是不允许的2. 一旦初始化完成，不能再给变量赋与初始化不同的变量3. &#96;&#96;&#96;var&#96;&#96;&#96;类型的变量必须是**局部变量**#### 返回一个n到m之间的随机数&#96;&#96;&#96;C#function randomNm(n, m)&#123;    if(m &gt;&#x3D; n)    &#123;        return random(m - n + 1) + n;&#x2F;&#x2F;加上1使得m也能在里面    &#125;    else return false;&#125;</code></pre><h4 id="返回一个字母"><a class="markdownIt-Anchor" href="#返回一个字母"></a> 返回一个字母</h4><pre><code class="hljs c#"><span class="hljs-function">function <span class="hljs-title">randomAscii</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">var</span> c = String.fromCharCode(random(<span class="hljs-number">26</span>) + <span class="hljs-number">65</span>);    <span class="hljs-keyword">if</span>(random(<span class="hljs-number">2</span>)) <span class="hljs-keyword">return</span> c.toLowerCase();    <span class="hljs-keyword">return</span> c;&#125;</code></pre><hr /><h3 id="比较和排序icomparable和icomparer以及它们的泛型实现"><a class="markdownIt-Anchor" href="#比较和排序icomparable和icomparer以及它们的泛型实现"></a> 比较和排序（IComparable和IComparer以及它们的泛型实现）</h3><ul><li>比较：两个<strong>实体类</strong>之间按<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><mi mathvariant="normal">，</mi><mo>=</mo><mi mathvariant="normal">，</mi><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&gt;，=，&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span></span></span>进行比较。</li><li>排序：在<strong>集合类</strong>中，对集合类中的实体进行排序。排序基于的算法基于实体类提供的比较函数。</li></ul><p>当创建了自己的实体类，如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>t</mi><mi>u</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Student</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span>，默认想要对其按照年龄进行排序，则需要为实体类实现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">IComparable</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span></span></span></span>接口</p><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:<span class="hljs-title">IComparable</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> IComparable Members</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CompareTo</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> obj</span>)</span><span class="hljs-function"></span>    &#123;        Student student = obj <span class="hljs-keyword">as</span> Student;        <span class="hljs-keyword">if</span> (Age &gt; student.Age)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Age == student.Age)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">else</span><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;        <span class="hljs-comment">//return Age.CompareTo(student.Age);</span>        <span class="hljs-comment">//函数完全可以使用该注释代码代替</span>    &#125;        <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span>&#125;</code></pre><p>测试用例：</p><pre><code class="hljs c#">ArrayList studentList;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> sender, EventArgs e</span>)</span><span class="hljs-function"></span>&#123;    studentList.Sort();<span class="hljs-comment">//</span>    <span class="hljs-keyword">foreach</span> (Student item <span class="hljs-keyword">in</span> studentList)    &#123;        <span class="hljs-keyword">this</span>.textBox1.Text += item.Name + <span class="hljs-string">&quot;----&quot;</span> +item.Age.ToString() + <span class="hljs-string">&quot;\r\n&quot;</span>  ;    &#125;&#125;</code></pre><p>使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">IComparer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>来实现一个自定义的比较器</p><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">SortName</span>: <span class="hljs-title">IComparer</span>&#123;    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> IComparer Members</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Compare</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> x, <span class="hljs-keyword">object</span> y</span>)</span><span class="hljs-function"></span>    &#123;        Student s1 = x <span class="hljs-keyword">as</span> Student;        Student s2 = y <span class="hljs-keyword">as</span> Student;        <span class="hljs-keyword">return</span> s1.Name.CompareTo(s2.Name);    &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span>&#125;</code></pre><p>在排序的使用为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Sort</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span></span></span></span>方法提供此比较器：</p><p><code>studentList.Sort(new SortName());</code></p><h4 id="泛型实现"><a class="markdownIt-Anchor" href="#泛型实现"></a> 泛型实现</h4><p>上个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Compare</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span></span></span></span>函数进行了装箱和拆箱，会影响性能。如果集合中有成千上万个复杂的实体对象，则在排序的时候所耗费掉的性能就是客观的。而泛型的出现，就可以避免掉拆箱和装箱。</p><p>上文代码中的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi>L</mi><mi>i</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">ArrayList</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">L</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span></span></span></span>，应该换成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo>&lt;</mo><mi>T</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">List&lt;T&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>，对应的，我们就该实现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mo>&lt;</mo><mi>T</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">IComparable&lt;T&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>r</mi><mo>&lt;</mo><mi>T</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">IComparer&lt;T&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></p><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Form1</span> : <span class="hljs-title">Form</span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Form1</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>    &#123;        InitializeComponent();        studentList = <span class="hljs-keyword">new</span> List&lt;Student&gt;();        studentList.Add(<span class="hljs-keyword">new</span> Student()        &#123;            Age = <span class="hljs-number">1</span>, Name = <span class="hljs-string">&quot;a1&quot;</span>        &#125;;        studentList.Add(<span class="hljs-keyword">new</span> Student()        &#123;            Age = <span class="hljs-number">5</span>, Name = <span class="hljs-string">&quot;g1&quot;</span>        &#125;;        studentList.Add(<span class="hljs-keyword">new</span> Student()        &#123;            Age = <span class="hljs-number">4</span>, Name = <span class="hljs-string">&quot;b1&quot;</span>        &#125;;        studentList.Add(<span class="hljs-keyword">new</span> Student()        &#123;            Age = <span class="hljs-number">2</span>, Name = <span class="hljs-string">&quot;f1&quot;</span>        &#125;;    &#125;    List&lt;Student&gt; studentList;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> sender, EventArgs e</span>)</span><span class="hljs-function"></span>    &#123;        studentList.Sort(<span class="hljs-keyword">new</span> SortName());d        <span class="hljs-keyword">foreach</span> (Student item <span class="hljs-keyword">in</span> studentList)        &#123;            <span class="hljs-keyword">this</span>.textBox1.Text += item.Name + <span class="hljs-string">&quot;----&quot;</span> +item.Age.ToString() + <span class="hljs-string">&quot;\r\n&quot;</span>  ;        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:<span class="hljs-title">IComparable</span>&lt;<span class="hljs-title">Student</span>&gt;&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> IComparable&lt;Student&gt; Members</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CompareTo</span>(<span class="hljs-params">Student other</span>)</span><span class="hljs-function"></span>    &#123;        <span class="hljs-keyword">return</span> Age.CompareTo(other.Age);    &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span>&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">SortName</span>: <span class="hljs-title">IComparer</span>&lt;<span class="hljs-title">Student</span>&gt;&#123;    <span class="hljs-meta">#<span class="hljs-meta-keyword">region</span> IComparer&lt;Student&gt; Members</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Compare</span>(<span class="hljs-params">Student x, Student y</span>)</span><span class="hljs-function"></span>    &#123;        <span class="hljs-keyword">return</span> x.Name.CompareTo(y.Name);    &#125;    <span class="hljs-meta">#<span class="hljs-meta-keyword">endregion</span></span>&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搜索</title>
    <link href="/2020/08/14/%E6%90%9C%E7%B4%A2/"/>
    <url>/2020/08/14/%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="dfs深搜"><a class="markdownIt-Anchor" href="#dfs深搜"></a> DFS（深搜）</h1><h2 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h2><ol><li>从某一初始出发点i开始访问：</li></ol><ul><li>输出改点编号</li><li>对该点作被访问标志（以免被重复访问）</li></ul><ol start="2"><li>从i的其中一个<strong>未被访问</strong>的邻接点j作为初始出发继续深搜</li></ol><p>当i的所有邻接点都被访问完，则返回到i的父结点的另一个邻接点k再继续深搜。直到全部结点访问完毕。</p><p>原则：能向前（指当前结点的下一层结点）走，就走。不能走就后退一步再选择可行点。</p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><pre><code class="hljs c++"><span class="hljs-comment">//DFS</span><span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span>;<span class="hljs-keyword">int</span> a[maxn][maxn];<span class="hljs-comment">//建立一个二维数组，表示各结点间有无边 定义在全局里初始都为0</span><span class="hljs-keyword">bool</span> vis[maxn];<span class="hljs-comment">//记录每个结点是否被访问过 定义在全局初始为false</span><span class="hljs-keyword">int</span> n, m;<span class="hljs-comment">//n:n个结点 m：m条边</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)    &#123;        <span class="hljs-built_in">cin</span> &gt;&gt; x &gt;&gt; y;        a[x][y] = <span class="hljs-number">1</span>;        a[y][x] = <span class="hljs-number">1</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;    vis[i] = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)    &#123;        <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-number">1</span> &amp;&amp; !vis[j])            dfs[j];    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    init();    dfs();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="bfs广搜"><a class="markdownIt-Anchor" href="#bfs广搜"></a> BFS（广搜）</h1><h2 id="方法-2"><a class="markdownIt-Anchor" href="#方法-2"></a> 方法</h2><ul><li>从图中某结点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 出发</li><li>在访问了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 之后依次访问 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的各个未曾访问的邻接点</li><li>分别从这些邻接点出发按广度优先搜索的顺序遍历图</li><li>直至图中所有可被访问的结点都被访问到</li></ul><p>原则：以<code>层</code>为阶段，每一层的所有结点访问完后，再访问下一层的结点</p><h2 id="实现-2"><a class="markdownIt-Anchor" href="#实现-2"></a> 实现</h2><pre><code class="hljs c++"><span class="hljs-comment">//BFS</span><span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100</span>;<span class="hljs-keyword">int</span> a[maxn][maxn];<span class="hljs-comment">//建立一个二维数组，表示各结点间有无边 定义在全局里初始都为0</span><span class="hljs-keyword">bool</span> vis[maxn];<span class="hljs-comment">//记录每个结点是否被访问过 定义在全局初始为false</span><span class="hljs-keyword">int</span> n, m, k;<span class="hljs-comment">//n:n个结点 m：m条边</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)    &#123;        a[x][y] = <span class="hljs-number">1</span>;        a[y][x] = <span class="hljs-number">1</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> head, tail;    <span class="hljs-keyword">int</span> q[maxn];    <span class="hljs-built_in">memset</span>(q, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(q));    head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">1</span>;<span class="hljs-comment">//队列初始化 head指向队头元素的前一个位置 tail指向队尾元素所在的位置</span>    q[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;    vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">while</span> (head &lt; tail) <span class="hljs-comment">//队列不空</span>    &#123;        head++;<span class="hljs-comment">//出队列</span>        k = q[head];        <span class="hljs-built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)        &#123;            <span class="hljs-keyword">if</span> (a[k][j] == <span class="hljs-number">1</span> &amp;&amp; !vis[j])            &#123;                tail++;                q[tail] = j;                vis[j] = <span class="hljs-literal">true</span>;            &#125;<span class="hljs-comment">//if</span>        &#125;<span class="hljs-comment">//for</span>    &#125;<span class="hljs-comment">//while</span>&#125;<span class="hljs-comment">//bfs</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    init();    bfs();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><hr /><h1 id="剪枝"><a class="markdownIt-Anchor" href="#剪枝"></a> 剪枝</h1><h2 id="可行性剪枝"><a class="markdownIt-Anchor" href="#可行性剪枝"></a> 可行性剪枝</h2><p>当前状态和题意不符，并且由于题目可以推出，往后的所有情况和题意都不符，那么就可以进行剪枝，直接把这种情况及后续的所有情况判负，直接返回。</p><p>即：不可行，就返回。</p><h2 id="排除等效冗余"><a class="markdownIt-Anchor" href="#排除等效冗余"></a> 排除等效冗余</h2><p>当几个枝桠具有完全相同的效果的时候，只选择其中一个走就可以了。</p><p>即：都可以，选一个。</p><h2 id="最优性剪枝"><a class="markdownIt-Anchor" href="#最优性剪枝"></a> 最优性剪枝</h2><p>解决最优化问题的时候的一种常用剪枝。就是当你搜到一半的时候，已经比已经搜到的最优解要不优了，那么这个方案肯定是不行的，即刻停止搜索，进行回溯。</p><p>即：有比较，选最优。</p><h2 id="顺序剪枝"><a class="markdownIt-Anchor" href="#顺序剪枝"></a> 顺序剪枝</h2><p>普遍来讲，搜索的顺序是不固定的，对一个问题来讲，算法可以进入搜索树的任意的一个子节点。但假如我们要搜索一个最小值，而非要从最大值存在的那个节点开搜，就可能存在搜索到最后才出解。而我们从最小的节点开搜很可能马上就出解。这就是顺序剪枝的一个应用。一般来讲，有单调性存在的搜索问题可以和贪心思想结合，进行顺序剪枝。</p><p>即：有顺序，按题意。</p><h2 id="记忆化"><a class="markdownIt-Anchor" href="#记忆化"></a> 记忆化</h2><p>记录搜索的每一个状态，当重复搜索到相同的状态的时候直接返回。</p><p>即：搜重了，直接跳。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>板子</title>
    <link href="/2020/08/03/%E6%9D%BF%E5%AD%90/"/>
    <url>/2020/08/03/%E6%9D%BF%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h2 id="高精度加法"><a class="markdownIt-Anchor" href="#高精度加法"></a> 高精度加法</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> a[<span class="hljs-number">255</span>], b[<span class="hljs-number">255</span>], c[<span class="hljs-number">255</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">string</span> s1, s2;<span class="hljs-keyword">int</span> la, lb, len;<span class="hljs-comment">/*memset(a, 0, sizeof(a));    </span><span class="hljs-comment">memset(b, 0, sizeof(b));</span><span class="hljs-comment">memset(c, 0, sizeof(c));*/</span><span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i - <span class="hljs-number">1</span>] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i - <span class="hljs-number">1</span>] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-keyword">if</span>(la &gt; lb) len = la;<span class="hljs-keyword">else</span> len = lb;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) c[i] = a[i] + b[i];<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;c[i + <span class="hljs-number">1</span>] += c[i] / <span class="hljs-number">10</span>;c[i] %= <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">if</span> (c[len] &gt; <span class="hljs-number">0</span>) len++;<span class="hljs-comment">/*for(int i = 0;i &lt; len;i++) </span><span class="hljs-comment">    std :: cout &lt;&lt; c[i] &lt;&lt; &#x27; &#x27;;</span><span class="hljs-comment">    cout &lt;&lt; endl;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">cout</span> &lt;&lt; c[i];<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="高精度减法"><a class="markdownIt-Anchor" href="#高精度减法"></a> 高精度减法</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> a[<span class="hljs-number">10086</span>], b[<span class="hljs-number">10086</span>], c[<span class="hljs-number">10086</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">string</span> s1, s2, s;<span class="hljs-keyword">char</span> fh;<span class="hljs-keyword">int</span> la, lb, k;<span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;<span class="hljs-keyword">if</span> (s1 == s2) &#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;0&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();<span class="hljs-keyword">if</span> (la &lt; lb || ((la == lb) &amp;&amp; (s1 &lt; s2)))&#123;fh = <span class="hljs-string">&#x27;-&#x27;</span>;    s = s1;    s1 = s2;    s2 = s;&#125;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//la绝对值大 </span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i - <span class="hljs-number">1</span>] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i - <span class="hljs-number">1</span>] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;k = la - <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; la; t++)&#123;<span class="hljs-keyword">if</span> (a[t] &lt; b[t])&#123;a[t + <span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>;a[t] += <span class="hljs-number">10</span>;&#125;a[t] -= b[t];&#125;<span class="hljs-keyword">while</span> (a[k] == <span class="hljs-number">0</span>) k--;<span class="hljs-comment">/*for(int i = 0;i &lt; len;i++) </span><span class="hljs-comment">    std :: cout &lt;&lt; c[i] &lt;&lt; &#x27; &#x27;;</span><span class="hljs-comment">    cout &lt;&lt; endl;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">if</span> (fh == <span class="hljs-string">&#x27;-&#x27;</span>) <span class="hljs-built_in">cout</span> &lt;&lt; fh;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">cout</span> &lt;&lt; a[i];<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="高精度乘法"><a class="markdownIt-Anchor" href="#高精度乘法"></a> 高精度乘法</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> a[<span class="hljs-number">2001</span>], b[<span class="hljs-number">2001</span>], c[<span class="hljs-number">4001</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">string</span> s1, s2;<span class="hljs-keyword">int</span> la, lb, len;<span class="hljs-comment">/*memset(a, 0, sizeof(a));    </span><span class="hljs-comment">memset(b, 0, sizeof(b));</span><span class="hljs-comment">memset(c, 0, sizeof(c));*/</span><span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();len = la + lb;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//从1开始 </span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= la; i++)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= lb; j++)&#123;c[i + j - <span class="hljs-number">1</span>] += a[i] * b[j]; <span class="hljs-comment">//模拟竖式计算 </span>&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)&#123;<span class="hljs-keyword">if</span> (c[i] &gt;= <span class="hljs-number">10</span>)&#123;c[i + <span class="hljs-number">1</span>] += c[i] / <span class="hljs-number">10</span>;c[i] %= <span class="hljs-number">10</span>;<span class="hljs-comment">//进位处理 </span>&#125;&#125;<span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<span class="hljs-keyword">if</span> (c[i])&#123;len = i;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) f = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> (f == <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len; i &gt;= <span class="hljs-number">1</span>; i--) <span class="hljs-built_in">cout</span> &lt;&lt; c[i];<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="高精度除法"><a class="markdownIt-Anchor" href="#高精度除法"></a> 高精度除法</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  </span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100001</span>;<span class="hljs-keyword">int</span> a[N], b[N], res[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">char</span> x[N], y[N];<span class="hljs-keyword">int</span> la, lb;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;la = <span class="hljs-built_in">strlen</span>(x);lb = <span class="hljs-built_in">strlen</span>(y);<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));      <span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(b));     <span class="hljs-built_in">memset</span>(res,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(res));         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i - <span class="hljs-number">1</span>] = x[i] - <span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i - <span class="hljs-number">1</span>] = y[i] - <span class="hljs-string">&#x27;0&#x27;</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">substraction</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2,<span class="hljs-keyword">int</span> len1,<span class="hljs-keyword">int</span> len2)</span></span><span class="hljs-function"><span class="hljs-comment">//计算长度为len1的大整数减去长度为len2的大整数的结果的长度 </span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//减的结果放在数组p1中，不够返回-1,正好返回0 </span><span class="hljs-keyword">if</span> (len1 &lt; len2) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (len1 == len2)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (p1[i] &gt; p2[i]) flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p1[i] &lt; p2[i])&#123;<span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len1; i++)&#123;p1[i] -= p2[i];<span class="hljs-keyword">if</span> (p1[i] &lt; <span class="hljs-number">0</span>)&#123;p1[i] += <span class="hljs-number">10</span>;p1[i + <span class="hljs-number">1</span>]--;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (p1[i]) <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<span class="hljs-keyword">if</span> (res[i] &gt;= <span class="hljs-number">10</span>)<span class="hljs-comment">//进位 </span>&#123;res[i + <span class="hljs-number">1</span>] += res[i] / <span class="hljs-number">10</span>;res[i] %= <span class="hljs-number">10</span>;&#125;&#125;<span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (flag) <span class="hljs-built_in">cout</span> &lt;&lt; res[i];<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res[i])&#123;<span class="hljs-built_in">cout</span> &lt;&lt; res[i];flag = <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divv</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;init();<span class="hljs-keyword">if</span> (la &lt; lb)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;la = substraction(a, b, la, lb);<span class="hljs-keyword">if</span> (la &lt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (la == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;res[<span class="hljs-number">0</span>]++;<span class="hljs-comment">//减掉一次了，商+1</span><span class="hljs-keyword">int</span> k = la - lb;<span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//减一次后不能再减了 </span>&#123;output();<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//将数组b乘以10的某次幂，使得其长度与数组a相同</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (i &gt;= k) b[i] = b[i - k];<span class="hljs-keyword">else</span> b[i] = <span class="hljs-number">0</span>;&#125;&#125;lb = la;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= k; i++)<span class="hljs-comment">//先减去若干个b*(10^k)，不够减了再减去若干个b*(10^(k-1))</span>&#123;<span class="hljs-keyword">int</span> temp;<span class="hljs-keyword">while</span> ((temp = substraction(a, b + i, la, lb - i)) &gt;= <span class="hljs-number">0</span>)<span class="hljs-comment">//一直减到不够减为止</span>&#123;la = temp;res[k - i]++; <span class="hljs-comment">//每成功减一次，则商的相应位+1</span>&#125;&#125;output();&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, x, y); divv();<span class="hljs-comment">//init();</span><span class="hljs-comment">//for (int i = 0; i &lt; la; i++) cout &lt;&lt; a[i];</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高精度</title>
    <link href="/2020/08/03/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    <url>/2020/08/03/%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="总述-tip-为整除"><a class="markdownIt-Anchor" href="#总述-tip-为整除"></a> 总述 （tip: ÷为整除</h2><h3 id="数据的接收与存储方法"><a class="markdownIt-Anchor" href="#数据的接收与存储方法"></a> 数据的接收与存储方法</h3><p>输入的数值没爆范围时，可用数值型变量来接收。但爆了以后，可采用字符串方式</p><a id="more"></a><ul><li>利用字符串函数和操作运算</li><li>直接用循环加数组 输入数据</li></ul><p><code>数串“字符串”形式输入数据，并将其转化为数组来存储</code></p><h3 id="高精度位数的确定"><a class="markdownIt-Anchor" href="#高精度位数的确定"></a> 高精度位数的确定</h3><p>接收时往往采用字符串，所以它的位数就 = 字符串长度。</p><ol><li>两数之和的位数最大为较大的数的位数+1</li><li>乘积的位数最大为两个因子的位数之和</li><li>阶乘与乘方的位数可以采用对数运算来确定计算结果的位数</li></ol><h3 id="进位处理和借位处理"><a class="markdownIt-Anchor" href="#进位处理和借位处理"></a> 进位处理和借位处理</h3><ul><li>加法的</li></ul><pre><code class="hljs c++">c[i] = a[i] + b[i];<span class="hljs-keyword">if</span> (c[i] &gt;= <span class="hljs-number">10</span>)&#123;    c[i] = c[i] % <span class="hljs-number">10</span>;    c[i + <span class="hljs-number">1</span>] = c[i + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;&#125;</code></pre><ul><li>减法的</li></ul><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (a[i] &lt; b[i])&#123;    a[i + <span class="hljs-number">1</span>] -=  <span class="hljs-number">1</span>;    a[i] += <span class="hljs-number">10</span>;&#125;c[i] = a[i] - b[i];</code></pre><ul><li>乘法的</li></ul><pre><code class="hljs c++">c[i + j - <span class="hljs-number">1</span>] = a[i] * b[j] + x + c[i + j - <span class="hljs-number">1</span>];x = c[i + j - <span class="hljs-number">1</span>] / <span class="hljs-number">10</span>;c[i + j - <span class="hljs-number">1</span>] = c[i + j - <span class="hljs-number">1</span>] % <span class="hljs-number">10</span>;</code></pre><ul><li>商和余数</li></ul><p>视被除数和除数的位数情况进行处理</p><ul><li>高精度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span>单精度 从高位相除取余数</li><li>高精度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span>高精度 再用高精度减法，再统计相减次数</li></ul><p>存储输出的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>位数字</p><h3 id="结果的输出"><a class="markdownIt-Anchor" href="#结果的输出"></a> 结果的输出</h3><p>小数点的位置、处理多于的0</p><hr /><h2 id="高精度加法"><a class="markdownIt-Anchor" href="#高精度加法"></a> 高精度加法</h2><p>要解决的问题：</p><ul><li>数据的输入</li><li>数据的存储</li><li>加法运算，注意进位处理</li><li>结果的输出</li></ul><h3 id="高精度数的输入和保存"><a class="markdownIt-Anchor" href="#高精度数的输入和保存"></a> 高精度数的输入和保存</h3><p><code>输入要符合数字的输入规律：连续输入，中间无空格。字符串读入，数组保存。</code></p><pre><code class="hljs c++"><span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i - <span class="hljs-number">1</span>] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i - <span class="hljs-number">1</span>] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//从0开始</span></code></pre><h3 id="加法运算时的进位"><a class="markdownIt-Anchor" href="#加法运算时的进位"></a> 加法运算时的进位</h3><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(la &gt; lb) len = la;<span class="hljs-keyword">else</span> len = lb; <span class="hljs-comment">//len是较大位数</span>m = <span class="hljs-number">0</span>;<span class="hljs-comment">//进位</span></code></pre><h4 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一：</h4><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;c[i] = (a[i] + b[i] + m) % <span class="hljs-number">10</span>;    m = (a[i] + b[i] + m) / <span class="hljs-number">10</span>;&#125;    <span class="hljs-comment">//最后一个进位m的处理</span><span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//m = 1</span>&#123;c[len++] = m;&#125;   </code></pre><h4 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h4><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)<span class="hljs-comment">//先逐位相加</span>&#123;    c[i] = a[i] + b[i];&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<span class="hljs-comment">//从低位依次处理低位</span>&#123;    c[i + <span class="hljs-number">1</span>] += c[i] / <span class="hljs-number">10</span>;    c[i] %= <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">if</span> (c[len + <span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>) len = len + <span class="hljs-number">1</span>;<span class="hljs-comment">//进位</span></code></pre><p>​</p><h4 id="方法三"><a class="markdownIt-Anchor" href="#方法三"></a> 方法三</h4><pre><code class="hljs c++"><span class="hljs-comment">//a = a + b; 节省空间，省去数组c</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;    a[i + <span class="hljs-number">1</span>] += (a[i] + b[i]) / <span class="hljs-number">10</span>;    a[i] = (a[i] + b[i]) % <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">if</span> (a[len + <span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>) len +=  <span class="hljs-number">1</span>; </code></pre><h3 id="运算结果的输出"><a class="markdownIt-Anchor" href="#运算结果的输出"></a> 运算结果的输出</h3><ul><li><p><code>for (int i = len - 1; i &gt;= 0; i--)</code></p></li><li><p><code>for (int i = len - 1; i &gt;= 1; i--)</code></p></li><li><p><code>cout &lt;&lt; c[0]</code></p></li></ul><p>如果数据变态的出了<code>0001</code>和<code>0002</code>这样的话……</p><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = len - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;    <span class="hljs-keyword">if</span> (c[j] == <span class="hljs-number">0</span>)        t++;    <span class="hljs-keyword">if</span> (c[j] != <span class="hljs-number">0</span>)        <span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (t == len) <span class="hljs-comment">//放置判0把答案0删除</span>&#123;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len - <span class="hljs-number">1</span> - t; i &gt;= <span class="hljs-number">0</span>; i--)<span class="hljs-comment">//判0</span>&#123;    <span class="hljs-built_in">cout</span> &lt;&lt; c[i];&#125;</code></pre><hr /><h2 id="高精度减法"><a class="markdownIt-Anchor" href="#高精度减法"></a> 高精度减法</h2><h3 id="需要解决的问题"><a class="markdownIt-Anchor" href="#需要解决的问题"></a> 需要解决的问题</h3><ol><li>比较 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 的大小 从而确定结果的正负号</li><li>借位问题</li><li>去掉结果前面多余的0</li></ol><h3 id="具体步骤"><a class="markdownIt-Anchor" href="#具体步骤"></a> 具体步骤</h3><ol><li>比较 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 的大小 确定<code>结果的正负号</code> <code>谁减谁</code></li></ol><pre><code class="hljs c++"><span class="hljs-built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;<span class="hljs-keyword">if</span> (s1 == s2) &#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;0&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();<span class="hljs-keyword">if</span> (la &lt; lb || ((la == lb) &amp;&amp; (s1 &lt; s2)))&#123;fh = <span class="hljs-string">&#x27;-&#x27;</span>;    s = s1;    s1 = s2;    s2 = s;&#125;la = s1.<span class="hljs-built_in">size</span>();lb = s2.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//la绝对值大 </span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i - <span class="hljs-number">1</span>] = s1[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i - <span class="hljs-number">1</span>] = s2[i] - <span class="hljs-string">&#x27;0&#x27;</span>;k = la - <span class="hljs-number">1</span>;<span class="hljs-comment">//数组从0开始</span></code></pre><ol start="2"><li>借位问题 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a = a-b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></li></ol><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; la; t++)&#123;<span class="hljs-keyword">if</span> (a[t] &lt; b[t])&#123;a[t + <span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>;a[t] += <span class="hljs-number">10</span>;&#125;a[t] -= b[t];&#125;</code></pre><ol start="3"><li>去掉结果前面多余的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li></ol><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (a[k] == <span class="hljs-number">0</span>) k--;</code></pre><hr /><h2 id="高精度乘法"><a class="markdownIt-Anchor" href="#高精度乘法"></a> 高精度乘法</h2><h3 id="单精度高精度"><a class="markdownIt-Anchor" href="#单精度高精度"></a> 单精度×高精度</h3><h4 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h4><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 的每一位都单独与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 相乘</li><li>由低到高位依次再处理 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 的进位</li><li>处理最高位</li></ol><h4 id="参考程序"><a class="markdownIt-Anchor" href="#参考程序"></a> 参考程序</h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> b, m;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> a[<span class="hljs-number">260</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> len;    <span class="hljs-built_in">string</span> s;    <span class="hljs-built_in">cin</span> &gt;&gt; s &gt;&gt; b;    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span> || s == <span class="hljs-string">&quot;0&quot;</span>)    &#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    len = s.<span class="hljs-built_in">size</span>();    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)        a[i] = s[len - i] - <span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)        a[i] *= b;<span class="hljs-comment">//逐位乘b</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= len; k++) <span class="hljs-comment">//处理进位</span>    &#123;        a[k + <span class="hljs-number">1</span>] += a[k] / <span class="hljs-number">10</span>;        a[k] = a[k] % <span class="hljs-number">10</span>;    &#125;    m = a[len + <span class="hljs-number">1</span>];    <span class="hljs-keyword">while</span> (m)    &#123;        len++;        a[len] = m % <span class="hljs-number">10</span>;        m /= <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = len; y &gt;= <span class="hljs-number">1</span>; y--)    <span class="hljs-built_in">cout</span> &lt;&lt; a[y];    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><hr /><h3 id="高精度高精度"><a class="markdownIt-Anchor" href="#高精度高精度"></a> 高精度×高精度</h3><p>见板子</p><hr /><h2 id="高精度除法"><a class="markdownIt-Anchor" href="#高精度除法"></a> 高精度除法</h2><h3 id="高精度单精度"><a class="markdownIt-Anchor" href="#高精度单精度"></a> 高精度÷单精度</h3><pre><code>1. 输入与储存</code></pre><p>单精度可以直接读入，高精度的输入与存储同<code>加法运算</code>，仍用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>存储数的个位</p><pre><code>2. 计算结果的位数</code></pre><p>除法运算的结果的位数<code>最大等于被除数的位数</code></p><pre><code>3. 除法计算以及商与余数的处理</code></pre><p>参与运算的数据：</p><ul><li><p>1个不变的数：除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></p></li><li><p>3个变化的数：被除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>、商 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 和余数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></p><p>已知被除数（高精度数）存储在数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>放的是被除数的个位，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[len]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>放的是被除数的最高位，根据除法运算的规则，应该从被除数的最高位开始除以除数，采取按位相处的方法</p><p>商 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo><mo>÷</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">c[len]=a[len]\div b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></p><p>余数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d=a[len]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> % <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></p><p>将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mn>10</mn><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d\times 10 + a[len - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 重新作为被除数，再继续以上步骤，直到被除数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>） 的每一位都除完为止</p><p>过程如下：</p></li></ul><pre><code class="hljs c++">d = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len; i &gt;= <span class="hljs-number">1</span>; i--)&#123;    d = d * <span class="hljs-number">10</span> + a[i];    c[i] = d / b;<span class="hljs-comment">//商</span>    d = d % b;<span class="hljs-comment">//余数</span>&#125;</code></pre><pre><code class="hljs angelscript"><span class="hljs-number">4.</span>结果的输出</code></pre><p>商放在数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 中，注意商中要去掉高位的0，确定好输出的位置，余数直接输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 即可</p><h4 id="参考程序-2"><a class="markdownIt-Anchor" href="#参考程序-2"></a> 参考程序</h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">2000</span>;<span class="hljs-built_in">string</span> sa;<span class="hljs-comment">//被除数</span><span class="hljs-keyword">int</span> b, d;<span class="hljs-comment">//b为除数，d为余数</span><span class="hljs-keyword">int</span> la, len;<span class="hljs-keyword">int</span> a[maxn], c[maxn];<span class="hljs-built_in">cin</span> &gt;&gt; sa &gt;&gt; b;la = sa.<span class="hljs-built_in">size</span>();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la; i &gt;= <span class="hljs-number">1</span>; i--)&#123;    a[la - i + <span class="hljs-number">1</span>] = sa[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;&#125;len = la;d = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len; i &gt;= <span class="hljs-number">1</span>; i--)&#123;    d = d * <span class="hljs-number">10</span> + a[i];    c[i] = d / b;<span class="hljs-comment">//商</span>    d = d % b;<span class="hljs-comment">//余数</span>&#125;<span class="hljs-keyword">while</span> (len &gt;= <span class="hljs-number">1</span> &amp;&amp; c[len] == <span class="hljs-number">0</span>)    len--;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = len; k &gt;= <span class="hljs-number">1</span>; k--)&#123;    <span class="hljs-built_in">cout</span> &lt;&lt; c[k];&#125;<span class="hljs-comment">//if (d) cout &lt;&lt; &#x27;.&#x27; &lt;&lt; d &lt;&lt; endl;</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>在做两个<code>高精度数</code>运算时，存储高精度数的数组元素可以不仅仅只保留一个数字，而采取保留<code>多位数</code></p><p>这样，在做运算（特别是乘法运算）时，可以减少很多操作次数</p><h3 id="高精度高精度-2"><a class="markdownIt-Anchor" href="#高精度高精度-2"></a> 高精度÷高精度</h3><ol><li>输入与储存</li></ol><p>仍用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>存储数的个位</p><ol start="2"><li>计算结果的位数</li></ol><p>除法运算的结果的位数<code>最大等于被除数的位数</code></p><ol start="3"><li><p>除法计算</p><p>可采用循环相减的方法，利用高精度减法来实现</p><ul><li>初始化余数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>,将被除数的最高位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[len]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> 的值赋给余数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 的第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li><li>比较余数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 和除数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 的大小。<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">d &lt; b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> ：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">d\times 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>（高精度乘法），并将被除数的下一个取数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[len - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>）再赋给余数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>的第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>位<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>≥</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">d\geq b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> ：跳出这步，继续</li></ul></li><li>计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>d</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">d=d-b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>（高精度减法）,并将商<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>的当前位<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">c[i] + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ,判断是否<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>≥</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">d\geq b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span><ul><li>是：继续上一步</li><li>否：得到商的一位</li></ul></li><li>返回第二步，继续</li><li>直至将被除数a的所有数取完并求减法结束为止</li></ul></li></ol><h4 id="参考程序-3"><a class="markdownIt-Anchor" href="#参考程序-3"></a> 参考程序</h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  </span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100001</span>;<span class="hljs-keyword">int</span> a[N], b[N], res[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">char</span> x[N], y[N];<span class="hljs-keyword">int</span> la, lb;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;la = <span class="hljs-built_in">strlen</span>(x);lb = <span class="hljs-built_in">strlen</span>(y);<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));      <span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(b));     <span class="hljs-built_in">memset</span>(res,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(res));         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i - <span class="hljs-number">1</span>] = x[i] - <span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i - <span class="hljs-number">1</span>] = y[i] - <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">//从0开始</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">substraction</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2,<span class="hljs-keyword">int</span> len1,<span class="hljs-keyword">int</span> len2)</span></span><span class="hljs-function"><span class="hljs-comment">//计算长度为len1的大整数减去长度为len2的大整数的结果的长度 </span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//减的结果放在数组p1中，不够返回-1,正好返回0 </span><span class="hljs-keyword">if</span> (len1 &lt; len2) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (len1 == len2)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (p1[i] &gt; p2[i]) flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p1[i] &lt; p2[i])&#123;<span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len1; i++)&#123;p1[i] -= p2[i];<span class="hljs-keyword">if</span> (p1[i] &lt; <span class="hljs-number">0</span>)&#123;p1[i] += <span class="hljs-number">10</span>;p1[i + <span class="hljs-number">1</span>]--;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (p1[i]) <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<span class="hljs-keyword">if</span> (res[i] &gt;= <span class="hljs-number">10</span>)<span class="hljs-comment">//进位 </span>&#123;res[i + <span class="hljs-number">1</span>] += res[i] / <span class="hljs-number">10</span>;res[i] %= <span class="hljs-number">10</span>;&#125;&#125;<span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (flag) <span class="hljs-built_in">cout</span> &lt;&lt; res[i];<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res[i])&#123;<span class="hljs-built_in">cout</span> &lt;&lt; res[i];flag = <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divv</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;init();<span class="hljs-keyword">if</span> (la &lt; lb)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;la = substraction(a, b, la, lb);<span class="hljs-keyword">if</span> (la &lt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (la == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;res[<span class="hljs-number">0</span>]++;<span class="hljs-comment">//减掉一次了，商+1</span><span class="hljs-keyword">int</span> k = la - lb;<span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//减一次后不能再减了 </span>&#123;output();<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//将数组b乘以10的某次幂，使得其长度与数组a相同</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-keyword">if</span> (i &gt;= k) b[i] = b[i - k];<span class="hljs-keyword">else</span> b[i] = <span class="hljs-number">0</span>;&#125;&#125;lb = la;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= k; i++)<span class="hljs-comment">//先减去若干个b*(10^k)，不够减了再减去若干个b*(10^(k-1))</span>&#123;<span class="hljs-keyword">int</span> temp;<span class="hljs-keyword">while</span> ((temp = substraction(a, b + i, la, lb - i)) &gt;= <span class="hljs-number">0</span>)<span class="hljs-comment">//一直减到不够减为止</span>&#123;la = temp;res[k - i]++; <span class="hljs-comment">//每成功减一次，则商的相应位+1</span>&#125;&#125;output();&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, x, y); divv();<span class="hljs-comment">//init();</span><span class="hljs-comment">//for (int i = 0; i &lt; la; i++) cout &lt;&lt; a[i];</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><hr /><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  </span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100001</span>;<span class="hljs-keyword">int</span> a[N], b[N], res[N * <span class="hljs-number">2</span>];<span class="hljs-keyword">char</span> x[N], y[N];<span class="hljs-keyword">int</span> la, lb;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;la = <span class="hljs-built_in">strlen</span>(x);lb = <span class="hljs-built_in">strlen</span>(y);<span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));      <span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(b));     <span class="hljs-built_in">memset</span>(res,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(res));         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) a[la - i] = x[i] - <span class="hljs-string">&#x27;0&#x27;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = lb - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) b[lb - i] = y[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//从1开始</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">substraction</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,<span class="hljs-keyword">int</span> *p2,<span class="hljs-keyword">int</span> len1,<span class="hljs-keyword">int</span> len2)</span></span><span class="hljs-function"><span class="hljs-comment">//计算长度为len1的大整数减去长度为len2的大整数的结果的长度 </span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//减的结果放在数组p1中，不够返回-1,正好返回0 </span><span class="hljs-keyword">if</span> (len1 &lt; len2) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span> (len1 == len2)&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<span class="hljs-keyword">if</span> (p1[i] &gt; p2[i]) flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p1[i] &lt; p2[i])&#123;<span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1; i++)&#123;p1[i] -= p2[i];<span class="hljs-keyword">if</span> (p1[i] &lt; <span class="hljs-number">0</span>)&#123;p1[i] += <span class="hljs-number">10</span>;p1[i + <span class="hljs-number">1</span>]--;&#125;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<span class="hljs-keyword">if</span> (p1[i]) <span class="hljs-keyword">return</span> i;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)&#123;<span class="hljs-keyword">if</span> (res[i] &gt;= <span class="hljs-number">10</span>)<span class="hljs-comment">//进位 </span>&#123;res[i + <span class="hljs-number">1</span>] += res[i] / <span class="hljs-number">10</span>;res[i] %= <span class="hljs-number">10</span>;&#125;&#125;<span class="hljs-keyword">bool</span> flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<span class="hljs-keyword">if</span> (flag) <span class="hljs-built_in">cout</span> &lt;&lt; res[i];<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res[i])&#123;<span class="hljs-built_in">cout</span> &lt;&lt; res[i];flag = <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">if</span> (!flag) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span>;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divv</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;init();<span class="hljs-keyword">if</span> (la &lt; lb)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;la = substraction(a, b, la, lb);<span class="hljs-keyword">if</span> (la &lt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (la == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span>;&#125;res[<span class="hljs-number">1</span>]++;<span class="hljs-comment">//减掉一次了，商+1</span><span class="hljs-keyword">int</span> k = la - lb;<span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//减一次后不能再减了 </span>&#123;output();<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//将数组b乘以10的某次幂，使得其长度与数组a相同</span>&#123;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = la; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<span class="hljs-keyword">if</span> (i &gt; k) b[i] = b[i - k];<span class="hljs-keyword">else</span> b[i] = <span class="hljs-number">0</span>;&#125;&#125;lb = la;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= k; i++)<span class="hljs-comment">//先减去若干个b*(10^k)，不够减了再减去若干个b*(10^(k-1))</span>&#123;<span class="hljs-keyword">int</span> temp;<span class="hljs-keyword">while</span> ((temp = substraction(a, b + i, la, lb - i)) &gt;= <span class="hljs-number">0</span>)<span class="hljs-comment">//一直减到不够减为止</span>&#123;la = temp;res[k - i + <span class="hljs-number">1</span>]++; <span class="hljs-comment">//每成功减一次，则商的相应位+1</span>&#125;&#125;output();&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>, x, y); divv();<span class="hljs-comment">//init();</span><span class="hljs-comment">//for (int i = 0; i &lt; la; i++) cout &lt;&lt; a[i];</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summer Cozy Rock</title>
    <link href="/2020/08/02/1/"/>
    <url>/2020/08/02/1/</url>
    
    <content type="html"><![CDATA[<p>Hello!Harujeon!</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
